#!/usr/bin/env crystal
require "../lib/utils.cr"
require "../lib/vm2.cr"


class Map
  property tiles : Array(Array(Bool))

  def initialize(rows, cols)
    @tiles = [] of Array(Bool)
    rows.times do
      @tiles << [] of Bool
      cols.times do
        @tiles.last << false
      end
    end
  end

  def get(x,y)
    @tiles[y][x]
  end

  def set(x,y,val)
    @tiles[y][x] = val
  end
end


class Robot
  property cpu : VM2::VM
  property map : Map

  property x : Int32
  property y : Int32

  property facing : Symbol

  property paint_count : Int32

  def initialize(map, program)
    @map = map
    @cpu = VM2.from_string(program)
    @cpu.debug = Utils.enable_debug_output?
    @x, @y = 0,0
    @facing = :up
    @paint_count = 0
  end

  def rotate_left
    case @facing
    when :up then @facing = :left
    when :left then @facing = :down
    when :down then @facing = :right
    when :right then @facing = :up
    else raise "can't rotate left from #{facing}"
    end
  end

  def rotate_right
    case @facing
    when :up then @facing = :right
    when :right then @facing = :down
    when :down then @facing = :left
    when :left then @facing = :up
    else raise "can't rotate right from #{@facing}"
    end
  end

  def move_forward
    case @facing
    when :up then @y -= 1
    when :right then @x += 1
    when :down then @y += 1
    when :left then @x -= 1
    else raise "can't move forward from #{@facing}"
    end
  end

  def do_camera
    if map.get(x,y)
      cpu.send_input(1)
    else
      cpu.send_input(0)
    end
  end

  def do_paint
    puts "robot paint"
    if color = cpu.read_output
      puts "  #{color}"
    @point_count += 1
      case color
      when 0 then map.set(x,y,false)
      when 1 then map.set(x,y,true)
      else raise "robot can't handle paint output #{color}"
      end
    end
  end

  def do_move
    puts "robot move"
    if dir = cpu.read_output
      puts "  #{dir}"
      case dir
      when 0 then rotate_left
      when 1 then rotate_right
      else raise "robot can't handle move output #{dir}"
      end

      move_forward
    end
  end

  def run
    puts "robot run"
    puts "  #{cpu.status}"
    while cpu.status != :halted
      puts "  tick"
      do_camera
      cpu.run_until_io
      do_paint
      cpu.run_until_io
      do_move
    end
  end


end

INPUT = Utils.get_input_file(Utils.cli_param_or_default(0, "day11/input.txt"))

map = Map.new(10,10)
robot = Robot.new(map, INPUT)
robot.x = 5
robot.y = 5

robot.run

puts "test"
puts "robot: #{robot.cpu}"
